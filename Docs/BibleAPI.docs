# Bible API Implementation Documentation

## Overview

This document describes the implementation of a robust Bible reading system that migrated from `bible-api.com` to `API.Bible` (scripture.api.bible) to support multiple translations including French. The system provides AI-powered verse search, explanations, and a complete Bible reading interface.

## Architecture Overview

### Core Components

1. **BibleService** (`src/lib/bible-service.ts`) - Main service orchestrator
2. **ApiBibleService** (`src/lib/api-bible-service.ts`) - API.Bible integration
3. **BibleConstants** (`src/lib/bible-constants.ts`) - Configuration and mappings
4. **BibleReader** (`src/components/bible-reader.tsx`) - UI component

### Data Flow

```
User Request ‚Üí BibleService ‚Üí API.Bible Service ‚Üí Parse HTML ‚Üí Display Verses
     ‚Üì
AI Integration (OpenRouter) ‚Üí Verse Suggestions & Explanations
```

## Migration from bible-api.com to API.Bible

### Why We Migrated

- **Limited Translations**: bible-api.com had limited French translation support
- **Better API**: API.Bible offers 282+ Bible translations with robust features
- **Reliability**: More stable and feature-rich API with proper authentication

### Migration Strategy

1. **Dual API Support**: Implemented fallback system to old API if new API fails
2. **Gradual Transition**: New API as primary, old API as backup
3. **Same Interface**: Maintained backward compatibility with existing components

## Setup Instructions

### 1. Environment Variables

Create `.env.local` file with:

```env
NEXT_PUBLIC_API_BIBLE_KEY=your_api_bible_key_here
NEXT_PUBLIC_OPENROUTER_API_KEY=your_openrouter_key_here
NEXT_PUBLIC_OPENROUTER_MODEL=mistralai/mistral-7b-instruct:free
NEXT_PUBLIC_SITE_URL=http://localhost:9003
```

### 2. Get API Keys

#### API.Bible Key
1. Visit [scripture.api.bible](https://scripture.api.bible)
2. Sign up for free account
3. Generate API key
4. Add to environment variables

#### OpenRouter Key (for AI features)
1. Visit [openrouter.ai](https://openrouter.ai)
2. Create account and generate API key
3. Add to environment variables

### 3. Install Dependencies

```bash
npm install
```

### 4. Run Development Server

```bash
npm run dev -- --port 9003
```

## Adding New Bible Versions/Translations

### üöÄ **Easy 4-Step Process**

Adding any Bible version is straightforward and requires only configuration changes - no complex coding needed!

#### **Step 1: Find Available Bible Versions**

First, discover what Bible versions are available:

```bash
# Create a quick script to list all available Bibles
echo 'const API_KEY = "your_api_key_here";
fetch("https://api.scripture.api.bible/v1/bibles", {
  headers: { "api-key": API_KEY }
}).then(r => r.json()).then(data => {
  console.log("Available Bibles:");
  data.data.forEach(bible => {
    console.log(`${bible.language.name} - ${bible.name} (ID: ${bible.id})`);
  });
});' > list-bibles.js

node list-bibles.js
```

**Example Output:**
```
Available Bibles:
English - World English Bible (ID: 9879dbb7cfe39e4d-01)
French - Bible J.N. Darby (ID: a93a92589195411f-01)
Spanish - Reina Valera 1909 (ID: 592420522e16049f-01)
German - Luther Bible 1912 (ID: 55212e3cf5d04d49-01)
Portuguese - Jo√£o Ferreira de Almeida (ID: 06125adad2d5898a-01)
Italian - Riveduta Bible 1927 (ID: 36639df4ba4e6d28-01)
```

#### **Step 2: Add Translation to Constants**

Edit `src/lib/bible-constants.ts` and add your new translation:

```typescript
// Add to TRANSLATIONS object
export const TRANSLATIONS = {
  web: {
    name: "World English Bible",
    apiBibleId: "9879dbb7cfe39e4d-01",
    language: "English"
  },
  lsg: {
    name: "Bible J.N. Darby", 
    apiBibleId: "a93a92589195411f-01",
    language: "French"
  },
  // üÜï ADD YOUR NEW TRANSLATION HERE
  rvr: {
    name: "Reina Valera 1909",
    apiBibleId: "592420522e16049f-01", 
    language: "Spanish"
  },
  lut: {
    name: "Luther Bible 1912",
    apiBibleId: "55212e3cf5d04d49-01",
    language: "German"  
  },
  alm: {
    name: "Jo√£o Ferreira de Almeida",
    apiBibleId: "06125adad2d5898a-01",
    language: "Portuguese"
  }
};

// Add to BibleTranslation type
export type BibleTranslation = 'web' | 'lsg' | 'rvr' | 'lut' | 'alm'; // Add your new keys
```

#### **Step 3: Add Localized Book Names (Optional)**

If your translation uses different book names, add them:

```typescript
// Example: Spanish book names
export const SPANISH_BOOK_NAMES = {
  "Genesis": "G√©nesis",
  "Exodus": "√âxodo", 
  "Leviticus": "Lev√≠tico",
  "Numbers": "N√∫meros",
  "Deuteronomy": "Deuteronomio",
  "Joshua": "Josu√©",
  "Judges": "Jueces",
  "Ruth": "Rut",
  "1 Samuel": "1 Samuel",
  "2 Samuel": "2 Samuel",
  // ... continue for all 66 books
};

// German book names
export const GERMAN_BOOK_NAMES = {
  "Genesis": "1. Mose",
  "Exodus": "2. Mose",
  "Leviticus": "3. Mose", 
  "Numbers": "4. Mose",
  "Deuteronomy": "5. Mose",
  "Joshua": "Josua",
  "Judges": "Richter",
  // ... continue for all 66 books
};

// Add to the book name mapping function
export function getLocalizedBookName(book: BibleBook, translation: BibleTranslation): string {
  switch (translation) {
    case 'lsg':
      return FRENCH_BOOK_NAMES[book] || book;
    case 'rvr':
      return SPANISH_BOOK_NAMES[book] || book;
    case 'lut':
      return GERMAN_BOOK_NAMES[book] || book;
    default:
      return book;
  }
}
```

#### **Step 4: Update UI (Optional)**

Add translation options to your UI component:

```typescript
// In your Bible reader component
const translationOptions = [
  { value: 'web', label: 'English (WEB)' },
  { value: 'lsg', label: 'Fran√ßais (Darby)' },
  { value: 'rvr', label: 'Espa√±ol (RVR 1909)' },
  { value: 'lut', label: 'Deutsch (Luther 1912)' },
  { value: 'alm', label: 'Portugu√™s (Almeida)' }
];
```

### üîç **Advanced: Finding Specific Translations**

#### **Search by Language**
```javascript
// Find all Spanish Bibles
const spanishBibles = data.data.filter(bible => 
  bible.language.name.toLowerCase().includes('spanish') ||
  bible.language.nameLocal?.toLowerCase().includes('espa√±ol')
);
```

#### **Search by Name**
```javascript
// Find King James Version
const kjvBibles = data.data.filter(bible => 
  bible.name.toLowerCase().includes('king james')
);

// Find NIV versions
const nivBibles = data.data.filter(bible => 
  bible.name.toLowerCase().includes('niv') ||
  bible.name.toLowerCase().includes('new international')
);
```

#### **Popular Bible IDs Reference**

| Translation | Language | Bible ID | Notes |
|-------------|----------|----------|-------|
| **King James Version (KJV)** | English | `de4e12af7f28f599-02` | Classic English |
| **New International Version (NIV)** | English | `71c6eab17ae5b667-01` | Modern English |
| **English Standard Version (ESV)** | English | `f72b840c855f362c-04` | Contemporary |
| **New American Standard (NASB)** | English | `1588748e6b4f9423-01` | Literal translation |
| **Reina Valera 1960** | Spanish | `592420522e16049f-02` | Popular Spanish |
| **Nueva Versi√≥n Internacional** | Spanish | `592420522e16049f-03` | Modern Spanish |
| **Louis Segond 1910** | French | `bf9f6c3b-f4b8-4938-8b2a-8e3f8b2c8c8c` | Classic French |
| **Luther Bible 2017** | German | `55212e3cf5d04d49-02` | Modern German |
| **Almeida Revista e Atualizada** | Portuguese | `06125adad2d5898a-02` | Updated Portuguese |
| **Nuova Riveduta 2006** | Italian | `36639df4ba4e6d28-02` | Modern Italian |

### üõ† **Testing New Translations**

#### **Quick Test Script**
```javascript
// test-translation.js
const API_KEY = "your_api_key_here";
const BIBLE_ID = "592420522e16049f-01"; // Spanish RVR 1909

async function testTranslation() {
  try {
    // Test getting Genesis 1
    const response = await fetch(
      `https://api.scripture.api.bible/v1/bibles/${BIBLE_ID}/chapters/GEN.1?content-type=html&include-verse-numbers=true&include-verse-spans=true`,
      { headers: { 'api-key': API_KEY } }
    );
    
    const data = await response.json();
    console.log('‚úÖ Translation working!');
    console.log('Sample content:', data.data.content.substring(0, 200) + '...');
    
    // Test verse parsing
    const verses = parseContent(data.data.content);
    console.log(`‚úÖ Parsed ${verses.length} verses`);
    console.log('First verse:', verses[0]);
    
  } catch (error) {
    console.error('‚ùå Translation test failed:', error);
  }
}

testTranslation();
```

#### **Verify in Browser**
1. Add your translation to the constants
2. Restart your development server
3. Navigate to `/bible`
4. Select your new translation from the dropdown
5. Try loading different books and chapters

### üö® **Common Issues & Solutions**

#### **Issue: Bible ID Not Working**
```
Error: Bible not found or access denied
```
**Solutions:**
- Verify the Bible ID is correct (copy exactly from API response)
- Check if the Bible requires special permissions
- Some Bibles may be restricted by region or subscription

#### **Issue: Parsing Problems**
```
Verses appear fragmented or missing
```
**Solutions:**
- Different translations may have different HTML structures
- Test with the parsing test script above
- Check if verse spans are properly formatted
- May need custom parsing logic for specific translations

#### **Issue: Book Names Not Matching**
```
Book "G√©nesis" not found
```
**Solutions:**
- Add localized book names to constants
- Implement book name mapping function
- Use English book names internally, display localized names in UI

### üìã **Translation Addition Checklist**

- [ ] **Find Bible ID** using the discovery script
- [ ] **Add to TRANSLATIONS** object in `bible-constants.ts`
- [ ] **Update BibleTranslation type** to include new key
- [ ] **Add localized book names** (if needed)
- [ ] **Update UI dropdown** with new translation option
- [ ] **Test with sample chapters** (Genesis 1, John 3, Psalm 23)
- [ ] **Verify verse parsing** works correctly
- [ ] **Check special characters** display properly
- [ ] **Test AI features** work with new translation
- [ ] **Update documentation** with new translation info

### üåç **Multi-Language UI Support**

For full internationalization, you can also localize the UI:

```typescript
// translations/ui.ts
export const UI_TRANSLATIONS = {
  en: {
    chapter: "Chapter",
    verse: "Verse", 
    search: "Search verses...",
    explain: "Explain this verse"
  },
  es: {
    chapter: "Cap√≠tulo",
    verse: "Vers√≠culo",
    search: "Buscar vers√≠culos...",
    explain: "Explicar este vers√≠culo"
  },
  fr: {
    chapter: "Chapitre", 
    verse: "Verset",
    search: "Rechercher des versets...",
    explain: "Expliquer ce verset"
  }
};
```

## Technical Implementation

### Bible Service Architecture

#### Main Service (`BibleService`)

```typescript
class BibleService {
  private useApiBible = true; // Feature flag
  
  async getChapter(book, chapter, translation) {
    // Try API.Bible first, fallback to old API
  }
  
  async getVersesByAI(query) {
    // AI-powered verse suggestions
  }
  
  async explainVerse(reference, verse) {
    // AI-powered verse explanations
  }
}
```

#### API.Bible Integration (`ApiBibleService`)

```typescript
class ApiBibleService {
  async getBibles() // Get available Bibles
  async getBooks(bibleId) // Get books for a Bible
  async getChapters(bibleId, bookId) // Get chapters
  async getChapter(bibleId, chapterId, options) // Get chapter content
}
```

### Supported Translations

| Language | Translation | Bible ID | Notes |
|----------|-------------|----------|-------|
| English | World English Bible | `9879dbb7cfe39e4d-01` | Primary English |
| French | Bible J.N. Darby | `a93a92589195411f-01` | French translation |

### HTML Parsing Strategy

The system uses a robust and optimized approach to parse API.Bible HTML content, ensuring accurate extraction and separation of individual verses. This strategy has been refined to handle various formatting nuances across different translations.

##### Core Verse Identification
API.Bible consistently marks individual verses within the HTML content using `<span>` tags with specific attributes:
- `<span data-number="[VERSE_NUMBER]" data-sid="[BOOK_ID] [CHAPTER]:[VERSE]" class="v">[VERSE_NUMBER]</span>`
  - `data-number`: The sequential verse number within the chapter (e.g., "1", "2", "3").
  - `data-sid`: The Scripture ID, providing a unique identifier for the verse (e.g., "GEN 1:1"). This is crucial for precise referencing.
  - `class="v"`: A consistent class attribute for all verse markers.

The actual verse text immediately follows this `<span>` marker and extends until the next verse marker or the end of the chapter content.

##### Parsing Flow

The `parseApiBibleContent` method in `src/lib/bible-service.ts` employs a multi-strategy parsing approach:

1.  **Strategy 1 (Primary - Regex-based extraction)**:
    -   This is the most reliable and primary method for extracting verses.
    -   It uses a regular expression to identify the verse marker (`<span class="v" ...>`) and capture all subsequent text until the *next* verse marker or the end of the content.
    -   The regex pattern specifically targets the `data-number` and `data-sid` attributes to extract the verse number and its unique ID.
    -   Example Regex: `/<!--v(\d+)-->(.*?)<!--v\d+|$)/gs` (Note: This is a placeholder for the actual regex if it uses HTML comments, else it refers to the span-based regex)
    -   **Current Actual Regex Used**: `/<span[^>]*data-number="(\d+)"[^>]*data-sid="([^"]*)"[^>]*class="v"[^>]*>\d+<\/span>(.*?)(?=<span[^>]*data-number="|$)/gs`
    -   **Benefit**: This method directly leverages the explicit verse markers and their attributes, ensuring accurate demarcation of each verse, even if it spans multiple HTML elements (like paragraphs, `<div>`s, etc.).

2.  **Strategy 2 (Paragraph-Based Refinement)**:
    -   This strategy was initially designed as a fallback but is less critical given the robustness of Strategy 1.
    -   It involves iterating through paragraph (`<p>`) elements within the HTML content.
    -   Within each paragraph, it searches for verse number patterns and attempts to extract text segments associated with those numbers.
    -   This helps in cases where verses might be fragmented or spread across different block-level elements, ensuring no text is missed.

3.  **Strategy 3 (Clean Text Fallback)**:
    -   This is the final fallback, used only if the previous strategies fail to yield satisfactory results (e.g., zero verses parsed or highly fragmented text).
    -   It strips all HTML tags from the content, leaving plain text.
    -   It then uses regular expressions to find number-text patterns (e.g., "1 In the beginning...", "2 And the earth...") to reconstruct verses.
    -   This ensures that some form of verse content is always returned, even from less structured or malformed HTML.

##### Post-Parsing Processing

After initial extraction, the parsed verses undergo further refinement:
-   **HTML Tag Cleaning**: All remaining HTML tags (like `<span>`, `<div>`, `<em>`, `<strong>`) are removed from the verse text.
-   **Whitespace Normalization**: Multiple spaces, tabs, and newlines are replaced with single spaces. `&nbsp;` and other HTML entities are converted to their corresponding characters.
-   **Deduplication & Consolidation**:
    -   The system intelligently handles cases where verse numbers might be duplicated or text fragments associated with the same verse number are found.
    -   It consolidates fragments for the same verse number, ensuring the most complete and accurate text is retained.
    -   Leading numbers in the verse text that might result from parsing artifacts are removed to prevent duplication (e.g., "1010" becomes "10").
-   **Sorting**: The final list of verses is sorted by verse number to ensure they are presented in the correct order.

This multi-faceted parsing strategy, with its emphasis on explicit verse markers and robust post-processing, ensures that the application reliably extracts and displays individual, identifiable Bible verses from the diverse HTML structures provided by API.Bible.

### Verse Deduplication Fix

**Problem**: Verse numbers were being duplicated (e.g., "1010", "1111", "1212")

**Solution**: 
```typescript
// Clean verse text to remove leading numbers
let cleanText = verse.text.replace(/^\d+\s*/, '').trim();

// Only append fragments that don't start with numbers
if (!/^\d+/.test(verseText)) {
  existingVerse.text += ' ' + verseText;
}
```

## API Reference

### BibleService Methods

#### `getChapter(book, chapter, translation)`
- **Parameters**: 
  - `book`: Bible book name (e.g., "Genesis", "Matthew")
  - `chapter`: Chapter number
  - `translation`: "web" (English) or "lsg" (French)
- **Returns**: Array of `BibleVerse` objects
- **Example**: 
  ```typescript
  const verses = await bibleService.getChapter("Genesis", 1, "web");
  ```

#### `getVersesByAI(query)`
- **Parameters**: 
  - `query`: Natural language query for verse suggestions
- **Returns**: `AIVerseResponse` with verse references
- **Example**: 
  ```typescript
  const response = await bibleService.getVersesByAI("verses about love");
  ```

#### `explainVerse(reference, verse)`
- **Parameters**: 
  - `reference`: Bible reference (e.g., "John 3:16")
  - `verse`: Verse text
- **Returns**: AI-generated explanation string
- **Example**: 
  ```typescript
  const explanation = await bibleService.explainVerse("John 3:16", "For God so loved...");
  ```

### Data Types

#### BibleVerse
```typescript
interface BibleVerse {
  verse: number;
  text: string;
}
```

#### AIVerseResponse
```typescript
interface AIVerseResponse {
  verses: string[]; // Array of Bible references
}
```

## Configuration

### Bible Constants (`bible-constants.ts`)

#### Book ID Mapping
Maps book names to API.Bible book IDs:
```typescript
const BOOK_ID_MAPPING = {
  "Genesis": "GEN",
  "Exodus": "EXO",
  // ... all 66 books
};
```

#### Translation Configuration
```typescript
const TRANSLATIONS = {
  web: {
    name: "World English Bible",
    apiBibleId: "9879dbb7cfe39e4d-01"
  },
  lsg: {
    name: "Bible J.N. Darby",
    apiBibleId: "a93a92589195411f-01"
  }
};
```

#### French Book Names
```typescript
const FRENCH_BOOK_NAMES = {
  "Genesis": "Gen√®se",
  "Exodus": "Exode",
  // ... all books in French
};
```

## Error Handling & Fallbacks

### Multi-Level Fallback System

1. **Primary**: API.Bible with HTML parsing
2. **Secondary**: API.Bible with different parsing strategy
3. **Tertiary**: Fallback to old bible-api.com
4. **Final**: Error message to user

### Common Issues & Solutions

#### Issue: 401 Unauthorized
- **Cause**: Invalid or missing API key
- **Solution**: Check `.env.local` file, ensure no trailing characters

#### Issue: Verse Number Duplication
- **Cause**: HTML parsing concatenating verse fragments incorrectly
- **Solution**: Implemented smart deduplication and text cleaning

#### Issue: Empty Verses
- **Cause**: HTML structure changes or parsing failures
- **Solution**: Multi-strategy parsing with fallbacks

## Performance Considerations

### Caching Strategy
- API responses could be cached for better performance
- Consider implementing Redis or local storage caching

### Rate Limiting
- API.Bible has rate limits
- Implement request throttling for production use

### Bundle Size
- Current implementation is lightweight
- Consider code splitting for larger applications

## Testing

### Manual Testing Checklist

1. **English Bible Reading**
   - [ ] Load Genesis 1 in English
   - [ ] Verify verse numbers and text formatting
   - [ ] Test chapter navigation

2. **French Bible Reading**
   - [ ] Load Gen√®se 1 in French
   - [ ] Verify proper French text display
   - [ ] Check for verse number duplication

3. **AI Features**
   - [ ] Test verse suggestions with natural language
   - [ ] Test verse explanations
   - [ ] Verify AI response formatting

4. **Error Handling**
   - [ ] Test with invalid book/chapter
   - [ ] Test with network failures
   - [ ] Verify fallback to old API

### Test Commands

```bash
# Test API.Bible connection
NEXT_PUBLIC_API_BIBLE_KEY="your_key" node -e "
const { apiBibleService } = require('./src/lib/api-bible-service.ts');
apiBibleService.getBibles().then(console.log);
"

# Test verse parsing
npm run test:verses # (if test script exists)
```

## Deployment

### Environment Setup
1. Set all required environment variables
2. Ensure API keys are valid and have proper permissions
3. Configure CORS if needed for production domain

### Build Process
```bash
npm run build
npm start
```

### Production Considerations
- Use production API keys
- Enable proper error logging
- Consider CDN for static assets
- Implement proper security headers

## Troubleshooting

### Common Problems

1. **App won't start**: Check port availability, try different port
2. **API errors**: Verify API keys and network connectivity
3. **Parsing issues**: Check HTML structure changes in API.Bible
4. **Missing translations**: Verify Bible IDs in constants file

### Debug Mode
Enable debug logging by setting:
```javascript
const DEBUG = true; // In bible-service.ts
```

## Future Enhancements

### Planned Features
- [ ] More translation support
- [ ] Verse bookmarking
- [ ] Reading plans
- [ ] Audio Bible integration
- [ ] Offline reading capability

### Technical Improvements
- [ ] Response caching
- [ ] Better error handling
- [ ] Performance optimization
- [ ] Unit test coverage
- [ ] TypeScript strict mode

## Contributing

### Code Style
- Use TypeScript for type safety
- Follow existing naming conventions
- Add JSDoc comments for public methods
- Maintain backward compatibility

### Adding New Translations
1. Find Bible ID from API.Bible
2. Add to `TRANSLATIONS` in `bible-constants.ts`
3. Add book name translations if needed
4. Test thoroughly with sample chapters

### Reporting Issues
- Include browser/environment details
- Provide steps to reproduce
- Include error messages and logs
- Test with different translations

---

## Quick Start Summary

1. **Get API Keys**: API.Bible + OpenRouter
2. **Set Environment**: Copy keys to `.env.local`
3. **Install**: `npm install`
4. **Run**: `npm run dev -- --port 9003`
5. **Test**: Visit `http://localhost:9003/bible`

The system is now ready with English and French Bible support, AI-powered features, and robust error handling!

### AI Search Feature

The application integrates an AI-powered search feature to suggest relevant Bible verses based on natural language queries. This feature uses a sophisticated two-stage process: AI verse selection and static verse lookup.

#### AI Search Architecture

The application contains two AI search implementations, with the Homepage implementation being the primary and actively used one.

##### A) Primary Implementation (Homepage)
-   **Location**: `src/app/page.tsx`
-   **AI Function**: Utilizes `aiVerseSelection()` from `src/ai/flows/ai-verse-selection.ts`.
-   **AI Model**: Communicates with the `mistralai/mistral-7b-instruct:free` model via OpenRouter.
-   **Response Format**: Expects and processes **structured JSON** output from the AI.
-   **Data Source for Verses**: Fetches individual verse texts from the static `KJV_DATA` object located in `src/lib/bible.ts`.
-   **Performance**: Ensures **instant verse lookup** due to in-memory static data.

##### B) Alternative/Unused Implementation (BibleService)
-   **Location**: `src/lib/bible-service.ts`
-   **AI Function**: Implemented within the `getVersesByAI()` method.
-   **Response Format**: Designed to extract references using regex from a natural text AI response (less structured than the primary method).
-   **Data Source**: This implementation is not directly connected to verse fetching in the current flow.

#### Detailed AI Search Flow (Primary Implementation)

The primary AI search flow follows a robust pipeline:

```
User Query ‚Üí AI Model ‚Üí JSON Response ‚Üí Parse References ‚Üí Lookup Verses ‚Üí Display
     ‚Üì            ‚Üì           ‚Üì              ‚Üì              ‚Üì            ‚Üì
"comfort"  ‚Üí  GPT/Mistral ‚Üí {"verses":[]} ‚Üí Validation ‚Üí KJV_DATA ‚Üí VerseCard
```

1.  **ü§ñ AI Processing (User Query to AI Response)**
    -   A user inputs a natural language query (e.g., "I need comfort in difficult times") into the `SearchBar`.
    -   The `handleSearch()` function in `src/app/page.tsx` calls `aiVerseSelection(query)`.
    -   The `aiVerseSelection` function sends this query to the configured AI model (e.g., Mistral via OpenRouter) with a detailed system prompt.
    -   The AI is instructed to return a **pure JSON object** containing a `verses` array (e.g., `{"verses": ["Psalms 23:1", "Isaiah 41:10", "Romans 8:28", "John 14:6"]}`).

2.  **üìã JSON Parsing and Reference Extraction**
    -   The AI's JSON response is parsed and validated (using Zod schema validation in `ai-verse-selection.ts`).
    -   This extracts the array of verse references (e.g., `["Psalms 23:1", "Isaiah 41:10"]`).
    -   Fallback handling is in place for malformed JSON responses from the AI.

3.  **üîç Verse Reference Validation and Parsing**
    -   Each extracted reference is further processed by the `parseVerseReference()` function in `src/lib/bible.ts`.
    -   This function uses a regex (`/^(\d?\s?[A-Za-z]+)\s(\d+):(\d+)$/`) to break down the reference into its constituent parts (Book, Chapter, Verse) and validates its format.
    -   Invalid references (e.g., non-existent books, incorrect formats) are identified and filtered.

4.  **üìñ Verse Text Retrieval (Lookup)**
    -   The `getVersesDetails()` function in `src/lib/bible.ts` takes the validated references.
    -   For each reference, it performs a **direct object property lookup** in the `KJV_DATA` object (`KJV_DATA[book][chapter][verse]`).
    -   This in-memory lookup provides **instant retrieval** of the actual verse text.
    -   Error handling is included for cases where a specific verse, chapter, or book is not found in `KJV_DATA`.

5.  **üé® Frontend Display**
    -   The retrieved verse details (reference and text) are formatted into a final JSON structure suitable for React components.
    -   `VerseCard` components in `src/app/page.tsx` display the verses to the user.
    -   Users can then click on a verse to trigger an `AiExplanationModal`, which leverages another AI flow to explain the verse in context of the original query.

#### JSON Data Structures

##### AI Model's Expected Output / `AIVerseResponse` Format:
```json
{
  "verses": [
    "John 3:16",
    "Romans 8:28",
    "Philippians 4:13",
    "Psalms 23:1"
  ]
}
```

##### `Verse` Details Format (for Frontend Display):
```json
[
  {
    "reference": "John 3:16",
    "text": "For God so loved the world, that he gave his only begotten Son..."
  },
  {
    "reference": "Romans 8:28",
    "text": "And we know that all things work together for good..."
  }
]
```

##### `KJV_DATA` Internal Structure (Simplified):
```javascript
{
  "Genesis": {
    "1": {
      "1": "In the beginning God created the heaven and the earth.",
      "2": "And the earth was without form, and void..."
    }
  },
  "John": {
    "3": {
      "16": "For God so loved the world..."
    }
  }
}
```

#### Performance Characteristics

The AI search feature is designed for optimal performance, primarily dictated by the AI model's response time.
-   **AI Response**: Typically `~1-3 seconds` (network dependent, varies by model and load).
-   **JSON Parsing**: ` <1ms` (instantaneous due to structured output).
-   **Verse Lookup**: ` <1ms` per verse (in-memory access, extremely fast).
-   **Total User Experience Time**: Predominantly influenced by the AI model's generation speed.

#### Key Features and Benefits

-   **üõ°Ô∏è Robust Error Handling**:
    -   Detects and handles invalid verse reference formats.
    -   Manages cases of missing books, chapters, or verses during lookup.
    -   Recovers gracefully from malformed AI JSON responses.
    -   Provides fallback verses on AI generation failures.
-   **üéØ Smart AI Prompt Engineering**:
    -   Uses a highly detailed system prompt to guide the AI model to select contextually relevant verses.
    -   Enforces strict output formatting and canonical book names for consistent parsing.
    -   Focuses the AI on providing spiritual guidance and comfort.
-   **üöÄ Performance Optimization**:
    -   Leverages a **static, in-memory KJV_DATA** for incredibly fast verse text retrieval, making the lookup practically instantaneous after the AI provides references.
    -   Designed to handle multiple verse references efficiently.

#### Integration Opportunities for Future Enhancements

-   **üåç Multi-Translation AI Suggestions**: Extend the AI to suggest verses from the user's currently selected `API.Bible` translation rather than just KJV. This would require passing the active `translation` to the AI or fetching verses from `API.Bible` after AI suggestions.
-   **üìö Dynamic Verse Retrieval**: Integrate the `BibleService`'s `getChapter` method (which uses `API.Bible`) into the AI verse retrieval flow to allow the AI feature to fetch verses from any of the supported `API.Bible` translations, not just KJV. This would make the AI search truly multi-lingual.
-   **üíæ Caching**: Implement caching mechanisms (e.g., Redis, browser local storage) for frequently requested AI suggestions or verse explanations to reduce repeated AI calls and network latency.

The AI search feature provides a **robust and efficient pipeline** for delivering relevant Bible verses, ensuring a responsive and spiritually enriching user experience. It effectively translates natural language queries into precise scriptural guidance, leveraging structured data and optimized retrieval mechanisms.
